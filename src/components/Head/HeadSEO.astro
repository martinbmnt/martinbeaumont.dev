---
import { SITE, OPEN_GRAPH } from '../../config';
import { getCanonicalURL } from '../../util';

export interface Props {
  content: any;
}

const canonicalURL = getCanonicalURL(Astro.site.host, Astro.canonicalURL.pathname);

const { content = {} } = Astro.props;
const formattedContentTitle = content.title ? `${content.title} â€“ ${SITE.title}` : SITE.title;
const imageSrc = content?.image?.src ?? OPEN_GRAPH.image.src;
const canonicalImageSrc = imageSrc ? new URL(imageSrc, Astro.site) : null;
const imageAlt = content?.image?.alt ?? OPEN_GRAPH.image.alt;
---

<title>{formattedContentTitle}</title>
<meta name="description" content={content.description ? content.description : SITE.description} />
<link rel="canonical" href={canonicalURL} />
<link rel="sitemap" href="/sitemap-index.html">
<meta name="robots" content="follow, index, max-snippet:-1, max-image-preview:large">
<meta property="og:title" content={formattedContentTitle} />
<meta property="og:type" content="article" />
<meta property="og:url" content={canonicalURL} />
<meta property="og:locale" content={SITE.language} />
{canonicalImageSrc && <meta property="og:image" content={canonicalImageSrc} />}
{imageAlt && <meta property="og:image:alt" content={imageAlt} />}
<meta property="og:description" content={content.description ? content.description : SITE.description} />
<meta property="og:site_name" content={SITE.title} />
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content={OPEN_GRAPH.twitter} />
<meta name="twitter:title" content={formattedContentTitle} />
<meta name="twitter:description" content={content.description ? content.description : SITE.description} />
{canonicalImageSrc && <meta name="twitter:image" content={canonicalImageSrc} />}
{imageAlt && <meta name="twitter:image:alt" content={imageAlt} />}
