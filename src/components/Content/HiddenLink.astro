---
/* eslint-disable no-unused-vars */
export enum HiddenTypes {
  mail = 'mail',
  phone = 'phone',
  text = 'text',
}
/* eslint-enable no-unused-vars */

export interface Props {
  value: string;
  type: HiddenTypes;
  showFullTitle?: true;
}

const content = Astro.props as Props;

const encodedContent = Buffer.from(content.value).toString('base64');
let title: string;

switch (content.type) {
  case HiddenTypes.mail:
    title = "l'adresse mail";
    break;
  case HiddenTypes.phone:
    title = 'le numéro de téléphone';
    break;
  default:
    title = 'le contenu';
}

---

<button class="button" data-encoded={encodedContent} data-type={content.type}>
  {content.showFullTitle ? `Afficher ${title}` : <>Afficher <span class="visually-hidden">{title}</span></>}
</button>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const buttons = Array.from(document.querySelectorAll('button[data-encoded]')) as HTMLButtonElement[];

    buttons.forEach(button => button.addEventListener('click', () => {
      const type = button.dataset.type as string;
      const decodedContent = atob(button.dataset.encoded);

      let linkURL: string | null;
      
      switch (type) {
        case 'mail':
          linkURL = `mailto:${decodedContent}`;
          break;
        case 'phone':
          linkURL = `tel:+33${decodedContent.replace(/(\s|\.|^0)/g, '')}`;
          break;
        default:
          linkURL = null;
      }

      const element = (type === 'text') ? document.createElement('p') : document.createElement('a');

      if (element instanceof HTMLAnchorElement) {
        element.href = linkURL;
      }

      element.textContent = decodedContent;

      button.replaceWith(element);
      element.focus();
    }));
  });
</script>
