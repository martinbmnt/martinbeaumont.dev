---
import { type CollectionEntry, getCollection } from "astro:content";

import '~styles/portfolio.scss';
import BaseLayout from "~layouts/BaseLayout.astro";
import Breadcrumb from '~components/Content/Breadcrumb.astro';
import Date from '~components/Content/Date.astro';
import ProjectIntroduction from '~components/Project/ProjectIntroduction.astro';
import ProjectCover from '~components/Project/ProjectCover.astro';
import ProjectReview from "~components/Project/ProjectReview.astro";
import type { ImageMetadata } from "astro";
import { render } from "astro:content";

interface Props {
  project: CollectionEntry<'project'>;
}

export async function getStaticPaths() {
  const projects = await getCollection('project');

  return projects.map((project) => ({
    params: {
      id: project.id
    },
    props: {
      project
    }
  }));
}

const { project } = Astro.props;
const { Content } = await render(project);

const schema = {
  '@context': 'https://schema.org',
  '@type': 'Article',
  headline: `${project.data.title} – Portfolio – Martin Beaumont`,
  image: [
    `${Astro.site.href}${project.data.cover.src}`,
  ],
  datePublished: project.data.publishDate,
  dateModified: project.data.updateDate,
  author: {
    '@id': `${Astro.site}#author`,
  },
};
---

<BaseLayout
  title={`${project.data.title} – Portfolio`}
  description={project.data.excerpt}
  image={({src: project.data.cover.seo.src, alt: project.data.cover.alt})}
  articleSection="Portfolio"
  publishDate={project.data.publishDate.toString()}
  updateDate={project.data.updateDate?.toString()}>
  <main>
    <article id="content" class="portfolio_item" aria-labelledby="article-title">
      <Breadcrumb page={{ path: '/portfolio', name: 'Portfolio' }} article={project.data.title} />
      <header>
        <h1 id="article-title">{project.data.title}</h1>
        <p>{project.data.excerpt}</p>
      </header>
      <ProjectCover cover={project.data.cover.src as ImageMetadata} cover_alt={project.data.cover.alt} />
      <ProjectIntroduction technologies={project.data.technologies} services={project.data.services} site={project.data.site} />
      <Content />
      {project.data.review && 
        <ProjectReview author={project.data.review.author} link={project.data.review.link}>
          {project.data.review.content}
        </ProjectReview>
      }
      <footer>
        <p>
          <small>
            Crédits images : sauf mention contraire, les captures d'écrans présentent sur cette page proviennent du site
            {project.data.site ? <a href={project.data.site} rel="noopener" target="_blank">{project.data.site.replace(/https:\/\//, '')}</a> : <>de {project.data.title}</>}.
          </small>
        </p>
        <p>
          <small>
            Publié le
            <Date datetime={project.data.publishDate.toString()} />{project.data.updateDate && <>, mis à jour le
              <Date datetime={project.data.updateDate?.toString()} />
            </>}
          </small>
        </p>
      </footer>
    </article>
    <script is:inline type="application/ld+json" set:html={JSON.stringify(schema)}/>
  </main>
</BaseLayout>
